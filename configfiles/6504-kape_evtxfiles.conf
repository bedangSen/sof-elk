# SOF-ELKÂ® Configuration File
# Author: Phil Hagen
# Email: phil@lewestech.com
#
# (C)2019 Lewes Technology Consulting, LLC
#
# This conf file accepts logs from the KAPE forensic tool

filter {
  if [type] == "kape_evtxlogs" and "json" not in [tags] {
    mutate {
      # promote the fields of interest out of the [raw] placeholder
      # remove the [raw] placeholder

      rename => {
        "[raw][Computer]" => "computer"
        "[raw][RemoteHost]" => "remotehost"
        "[raw][UserId]" => "user_id"
        "[raw][UserName]" => "username"
        "[raw][Channel]" => "channel"
        "[raw][Provider]" => "provider"
        "[raw][EventId]" => "event_id"
        "[raw][EventRecordId]" => "event_record_id"
        "[raw][ProcessId]" => "process_id"
        "[raw][ThreadId]" => "thread_id"
        "[raw][Level]" => "level"
        "[raw][SourceFile]" => "source_file"
        "[raw][TimeCreated]" => "time_created"
        "[raw][RecordNumber]" => "record_number"
        "[raw][Payload]" => "payload"
        "[raw][MapDescription]" => "map_description"
        "[raw][ExecutableInfo]" => "executable_info"
      }
    }

    if [raw][PayloadData1] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData1]}" ]
        }
      }
    }
    if [raw][PayloadData2] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData2]}" ]
        }
      }
    }
    if [raw][PayloadData3] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData3]}" ]
        }
      }
    }
    if [raw][PayloadData4] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData4]}" ]
        }
      }
    }
    if [raw][PayloadData5] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData5]}" ]
        }
      }
    }
    if [raw][PayloadData6] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData6]}" ]
        }
      }
    }

    mutate {
      remove_field => [ "raw" ]
    }


    # use the TimeCreated field for the timestamp
    date {
      match => [ "[time_created]", "ISO8601" ]
    }

    # clean up field names for the Payload string
    mutate {
      gsub => [
        "payload", "@Name", "name",
        "payload", "#text", "text"
      ]
    }
    
    # Creating a duplicate of the payload just for reference purposes.
    mutate {
      add_field => {
          "payload_duplicate" => [ "%{[payload]}" ]
        }
    }

    # Changing the structure of the payload json from {"name":"field_key", "text":"feild_value"} to {"field_key":"feild_value"} for easier and more accurate parsing using the json filter.
    # Update: Adding gsub filter to convert fields which have a field name but no field value to key:value pair. For example {"name","field_key"} to {"field_key":"-"}. This prevents the json filter from breaking.
    mutate {
      gsub => [
        "payload", '"name":(".[^"]*?")(\})', '\1:"-"\2',
        "payload", '"name":(".*?"),"text":(".*?")', "\1:\2"
      ]
    }

    # Using the json mutate filter to parse the individual fields in the json payload.
    json {
      source => "payload"
    }

    # Creating a new field for just the IP addresses (removing port information from 131 RDP events)
    grok {
        match => { "remotehost" => "%{IP:parsed_remote_ip}" }
    }

    # PJH: Realistically, we should have a better way to handle the Payload field, which is a bunch of
    #      json and possibly the PayloadData[1-6] fields.  This is a starting point, though.... It's
    #      goingto be a challenge because of the widely varied content in those fields. Keeping as a
    #      string for the time being.
    #      It will probably need a ruby filter script but I have no idea how complex that will be.
  }
}
